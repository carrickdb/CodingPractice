__breaking sticks__


divide by largest prime factor


1 -> 1

2 -> 1 + 2 = 3

3 -> 1 + 3 = 4

4 -> 1 + 2 + 4 = 7

6 -> 1 + 3 + 6 = 10

8 -> 1 + 2 + 4 + 8 = 15

10 -> 1 + 5 + 10 = 16

12 -> 1 + 3 + 6 + 12 = 22

14 -> 




30  = 1 + 5 + 15 + 30 = 51

6 6 6 6 6

2 2 2 


10 10 10 = 1 + 3 + 15 + 30

2 2 2 2 2




14 -> 1 + 7 + 14

or 

7 7  -> 1 + 2 + 14



12   1+3 + 6 + 12 = 22

4 4 4

2 2  2 2  2 2



12   1 + 4 + 12

3 3 3 3 



12 = 1 + 2 + 4 + 12 = 

6 6

3 3  3 3



10    1 + 2 + 10

5 5


10  1 + 5 + 10

2 2 2 2 2





    8

2  2  2  2   1 + 4 + 8



    8

 4     4    1

2 2   2 2   2

1 + 2 + 4 + 8



24 (2 2 3 2)

8 8 8 -> 1    2 2 2 2 2 2 2 2 2 2 2 2 2 -> 1 + 12 + 24 = 37

2 2 2 2   2 2 2 2  2 2 2 2      -> 1 + 3 + 12 + 24 = 40


4 4  4 4  4 4  -> 1 + 3 + 6 + 12 + 24 = 46

2 2  2 2  2 2 ...

guaranteed: 1 +...+ num (lower bound)



odd: num + 1


__gridland__

12345
OOXXO

c1=3
c2=4


__bitwiseAND__

n = 2
k = 2

1
10
0

n = 3
k = 2

01
10
11

00
01
10

answer: 1

n = 3
k = 3

answer: 10 (2)


n = 4
k = 2, 3, 4

001: 0  1  0
010: 10 0
011: 0
100

answer: 10 (2)


n = 5
k = 2, 3

001: 0  1  0  1
010: 10 0  0
011: 0  1
100: 100
101


n = 5
k = 4, 5

answer: 4


n = 11
k = 8


00001: 0  1  0  1  0 (forever)    2
00010: 10 0  0  10  10 0 0 10 10 0 0 (forever)    4
00011: 0  1  10  11  (forever)    4
00100: 100 100 100 0 0 0 0 100 100 100 100 (forever)   8
00101: 100 101 0 1 0 1 100 101 100 101 0 (forever)   8
00110: 110 0 0 10 10 100 100 110 110 0 (forever) 8
00111: 0 1 10 11 100 101 110 111 (forever)  8
01000: 1 (x7) 0 (x8) 1 (x8) (forever)   16
01001: 1000 1001 
01010
01011
01100
01101
01110
01111
10000
10001
10010
10011
10100
10101
10110
10111
11000
11001
11010
11011
11100
11101
11110
11111




length of cycle depends on the greatest power of 2 it's equal to or greater than (2^(k+1))


n >= 7
k = 4
answer = 3 









